// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharpCardAPI.Data;

#nullable disable

namespace SharpCardAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("SharpCardAPI.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("SharpCardAPI.Models.ProblemSolution", b =>
                {
                    b.Property<int>("ProblemSolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SolutionUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpaceComplexity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeComplexity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProblemSolutionId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("ProblemSolutions");
                });

            modelBuilder.Entity("SharpCardAPI.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemStatement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProblemUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SharpCardAPI.Models.QuestionCard", b =>
                {
                    b.Property<int>("QuestionCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DidAttempt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastReviewed")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionCardId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCards");
                });

            modelBuilder.Entity("SharpCardAPI.Models.QuestionTag", b =>
                {
                    b.Property<int>("QuestionTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionTagId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTags");
                });

            modelBuilder.Entity("SharpCardAPI.Models.SolutionHistory", b =>
                {
                    b.Property<int>("SolutionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SolutionState")
                        .HasColumnType("INTEGER");

                    b.HasKey("SolutionHistoryId");

                    b.HasIndex("QuestionCardId");

                    b.ToTable("SolutionHistories");
                });

            modelBuilder.Entity("SharpCardAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPersonnel")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SharpCardAPI.Models.Option", b =>
                {
                    b.HasOne("SharpCardAPI.Models.Question", null)
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpCardAPI.Models.ProblemSolution", b =>
                {
                    b.HasOne("SharpCardAPI.Models.Question", null)
                        .WithOne("Solution")
                        .HasForeignKey("SharpCardAPI.Models.ProblemSolution", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpCardAPI.Models.QuestionCard", b =>
                {
                    b.HasOne("SharpCardAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharpCardAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharpCardAPI.Models.QuestionTag", b =>
                {
                    b.HasOne("SharpCardAPI.Models.Question", null)
                        .WithMany("Tags")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("SharpCardAPI.Models.SolutionHistory", b =>
                {
                    b.HasOne("SharpCardAPI.Models.QuestionCard", null)
                        .WithMany("Histories")
                        .HasForeignKey("QuestionCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharpCardAPI.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Solution")
                        .IsRequired();

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SharpCardAPI.Models.QuestionCard", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
